require('dotenv').config();
const fs = require('fs');
const path = require('path');
const { Bot, GrammyError, HttpError, Keyboard, InlineKeyboard, session } = require('grammy');
const sqlite3 = require('sqlite3').verbose();
const { open } = require('sqlite');
const { logger } = require('./utils/logger');
const { updateUserData, recordUserInteraction, recordSocialNetworkRequest, recordPromoCodeRequest, isAdmin, createKeyboard, getUsageStats, getMessages } = require('./utils/helpers');
const { socialNetworks, promoCodes } = require('./utils/buttons');

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
const bot = new Bot(process.env.BOT_API_KEY);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
bot.use(session({
  initial: () => ({})
}));

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
async function createTables(db) {
  await db.exec(`CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY,
    timesStarted INTEGER DEFAULT 0,
    lastSeen TIMESTAMP DEFAULT CURRENT_TIMESTAMP
  )`);

  await db.exec(`CREATE TABLE IF NOT EXISTS interactions (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    userId INTEGER,
    interactionTime TIMESTAMP
  )`);

  await db.exec(`CREATE TABLE IF NOT EXISTS socialNetworkRequests (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    userId INTEGER,
    networkName TEXT,
    requestTime TIMESTAMP
  )`);

  await db.exec(`CREATE TABLE IF NOT EXISTS promoCodeRequests (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    userId INTEGER,
    promoName TEXT,
    requestTime TIMESTAMP
  )`);

  await db.exec(`CREATE TABLE IF NOT EXISTS messages (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    userId INTEGER,
    message TEXT,
    media_type TEXT,
    media_id TEXT,
    replied INTEGER DEFAULT 0,
    first_name TEXT,
    username TEXT,
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
  )`);

  logger.info('Tables created or already exist');
}

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
let db;
(async () => {
  const dbPath = './userData.db';

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  const dbExists = fs.existsSync(dbPath);

  db = await open({
    filename: dbPath,
    driver: sqlite3.Database
  });

  // –ï—Å–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
  if (!dbExists) {
    await createTables(db);
  }

  logger.info('Database initialized and connection established');
})();

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
bot.command('start', async (ctx) => {
  logger.info(`User ${ctx.from.id} started the bot`);
  await updateUserData(db, ctx.from.id);
  const startKeyboard = new Keyboard()
    .text('üôã‚Äç‚ôÇÔ∏è –ü—Ä–µ–¥–ª–æ–∂–∫–∞')
    .row()
    .text('üì≤ –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏')
    .row()
    .text('üî• –ü—Ä–æ–º–æ–∫–æ–¥—ã –∏ —Å–∫–∏–¥–∫–∏')
    .row();
  await ctx.reply('–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–æ–º–æ—â–Ω–∏–∫ –∫–∞–Ω–∞–ª–∞ –¢–µ—Ö–Ω–æ–º–∞–Ω—å—è–∫!');
  await ctx.reply('üôã‚Äç‚ôÇÔ∏è –ü—Ä–µ–¥–ª–æ–∂–∫–∞ - —Ç—É—Ç —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞ –∫–∞–Ω–∞–ª–µ.');
  await ctx.reply('üì≤ –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏ - —è –≤–æ –≤—Å–µ—Ö —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö.');
  await ctx.reply('üî• –ü—Ä–æ–º–æ–∫–æ–¥—ã –∏ —Å–∫–∏–¥–∫–∏ - –ø—Ä–æ–º–æ–∫–æ–¥—ã –∏ —Å–∫–∏–¥–∫–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.');
  await ctx.reply('–° —á–µ–≥–æ –Ω–∞—á–Ω–µ–º? –í—ã–±–∏—Ä–∞–π üëá', {
    reply_markup: startKeyboard,
  });
});

bot.command('admin', async (ctx) => {
  if (isAdmin(ctx.from.id, process.env.ADMIN_ID)) {
    const stats = await getUsageStats(db);
    let response = `–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞:\n–í—Å–µ–≥–æ –∑–∞–ø—É—Å–∫–æ–≤: ${stats.totalStarts}\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –±–æ—Ç–∞ —Å–µ–≥–æ–¥–Ω—è: ${stats.todayStarts}\n–í—Å–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π: ${stats.totalInteractions}\n–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π —Å–µ–≥–æ–¥–Ω—è: ${stats.todayInteractions}\n\n`;

    response += '–ó–∞–ø—Ä–æ—Å—ã –Ω–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏:\n';
    for (const { networkName, total } of stats.totalSocialNetworkRequests) {
      const today = stats.todaySocialNetworkRequests.find(n => n.networkName === networkName)?.today || 0;
      response += `${networkName} - –í—Å–µ–≥–æ: ${total}, –°–µ–≥–æ–¥–Ω—è: ${today}\n`;
    }

    response += '\n–ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –ø—Ä–æ–º–æ–∫–æ–¥—ã:\n';
    for (const { promoName, total } of stats.totalPromoCodeRequests) {
      const today = stats.todayPromoCodeRequests.find(p => p.promoName === promoName)?.today || 0;
      response += `${promoName} - –í—Å–µ–≥–æ: ${total}, –°–µ–≥–æ–¥–Ω—è: ${today}\n`;
    }

    await ctx.reply(response);
  } else {
    await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π —Å –±–æ—Ç–æ–º
bot.use(async (ctx, next) => {
  await recordUserInteraction(db, ctx.from.id);
  return next();
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
function handleButtonClicks(items, recordRequest) {
  items.forEach(item => {
    bot.hears(item.name, async (ctx) => {
      await recordUserInteraction(db, ctx.from.id);
      await recordRequest(db, ctx.from.id, item.name);
      let message = '';
      if (item.type === 'social') {
        message = `–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ ${item.name}: ${item.url}`;
      } else if (item.type === 'promo') {
        message = `–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ ${item.name}: ${item.url}\n\n–ü—Ä–æ–º–æ–∫–æ–¥: ${item.code}\n\n–û–ø–∏—Å–∞–Ω–∏–µ: ${item.description}`;
      }
      await ctx.reply(message);
    });
  });
}

handleButtonClicks(socialNetworks, recordSocialNetworkRequest);
handleButtonClicks(promoCodes, recordPromoCodeRequest);

bot.hears('üì≤ –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏', async (ctx) => {
  const socialKeyboard = createKeyboard(socialNetworks);
  await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ü–∏–∞–ª—å–Ω—É—é —Å–µ—Ç—å:', {
    reply_markup: socialKeyboard,
  });
});

bot.hears('üî• –ü—Ä–æ–º–æ–∫–æ–¥—ã –∏ —Å–∫–∏–¥–∫–∏', async (ctx) => {
  const promoKeyboard = createKeyboard(promoCodes);
  await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –∏ —Å–∫–∏–¥–æ–∫:', {
    reply_markup: promoKeyboard,
  });
});

bot.hears('–ù–∞–∑–∞–¥ ‚Ü©Ô∏è', async (ctx) => {
  const startKeyboard = new Keyboard()
    .text('üôã‚Äç‚ôÇÔ∏è –ü—Ä–µ–¥–ª–æ–∂–∫–∞')
    .row()
    .text('üì≤ –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏')
    .row()
    .text('üî• –ü—Ä–æ–º–æ–∫–æ–¥—ã –∏ —Å–∫–∏–¥–∫–∏')
    .row();
  await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
    reply_markup: startKeyboard,
  });
});

let suggestionClicked = {};
let unreadMessagesCount = 0;

bot.hears('üôã‚Äç‚ôÇÔ∏è –ü—Ä–µ–¥–ª–æ–∂–∫–∞', async (ctx) => {
  if (isAdmin(ctx.from.id, process.env.ADMIN_ID)) {
    console.log('Admin accessed suggestions');
    const adminKeyboard = new Keyboard()
      .text('–í—Å–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è')
      .row()
      .text('–°–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –æ—Ç–≤–µ—Ç–∞')
      .row()
      .text('–ù–∞–∑–∞–¥ ‚Ü©Ô∏è')
      .row();
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
      reply_markup: adminKeyboard,
    });
    suggestionClicked[ctx.from.id] = true;
  } else {
    suggestionClicked[ctx.from.id] = true;
    await ctx.reply('–û–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–≤—Ç–æ—Ä—É –±–æ—Ç–∞.');
  }
});

bot.hears('–í—Å–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è', async (ctx) => {
  if (!isAdmin(ctx.from.id, process.env.ADMIN_ID)) return;
  const messages = await getMessages(db);
  if (messages.length === 0) {
    await ctx.reply('–°–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç.');
  } else {
    for (const message of messages) {
      const inlineKeyboard = new InlineKeyboard().text('–û—Ç–≤–µ—Ç–∏—Ç—å', `reply-${message.id}`);
      const userInfo = `–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${message.first_name} (@${message.username}, ID: ${message.userId})`;

      if (message.message) {
        await ctx.reply(`${userInfo}: ${message.message}`, { reply_markup: inlineKeyboard });
      } else {
        const mediaType = message.media_type;
        if (mediaType === 'photo') {
          await ctx.api.sendPhoto(ctx.chat.id, message.media_id, {
            caption: userInfo,
            reply_markup: inlineKeyboard
          });
        } else if (mediaType === 'video') {
          await ctx.api.sendVideo(ctx.chat.id, message.media_id, {
            caption: userInfo,
            reply_markup: inlineKeyboard
          });
        } else if (mediaType === 'document') {
          await ctx.api.sendDocument(ctx.chat.id, message.media_id, {
            caption: userInfo,
            reply_markup: inlineKeyboard
          });
        } else if (mediaType === 'audio') {
          await ctx.api.sendAudio(ctx.chat.id, message.media_id, {
            caption: userInfo,
            reply_markup: inlineKeyboard
          });
        } else if (mediaType === 'voice') {
          await ctx.api.sendVoice(ctx.chat.id, message.media_id, {
            caption: userInfo,
            reply_markup: inlineKeyboard
          });
        } else if (mediaType === 'video_note') {
          await ctx.api.sendVideoNote(ctx.chat.id, message.media_id, {
            caption: userInfo,
            reply_markup: inlineKeyboard
          });
        }
      }
    }
  }
});

bot.hears('–°–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –æ—Ç–≤–µ—Ç–∞', async (ctx) => {
  if (!isAdmin(ctx.from.id, process.env.ADMIN_ID)) return;

  const messages = await getMessages(db, 0);  // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –æ—Ç–≤–µ—Ç–∞

  if (messages.length === 0) {
    await ctx.reply('–°–æ–æ–±—â–µ–Ω–∏–π –±–µ–∑ –æ—Ç–≤–µ—Ç–∞ –Ω–µ—Ç.');
  } else {
    for (const message of messages) {
      const inlineKeyboard = new InlineKeyboard().text('–û—Ç–≤–µ—Ç–∏—Ç—å', `reply-${message.id}`);
      const userInfo = `–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${message.first_name} (@${message.username}, ID: ${message.userId})`;

      if (message.message) {
        await ctx.reply(`${userInfo}: ${message.message}`, { reply_markup: inlineKeyboard });
      } else {
        const mediaType = message.media_type;
        if (mediaType === 'photo') {
          await ctx.api.sendPhoto(ctx.chat.id, message.media_id, {
            caption: userInfo,
            reply_markup: inlineKeyboard
          });
        } else if (mediaType === 'video') {
          await ctx.api.sendVideo(ctx.chat.id, message.media_id, {
            caption: userInfo,
            reply_markup: inlineKeyboard
          });
        } else if (mediaType === 'document') {
          await ctx.api.sendDocument(ctx.chat.id, message.media_id, {
            caption: userInfo,
            reply_markup: inlineKeyboard
          });
        } else if (mediaType === 'audio') {
          await ctx.api.sendAudio(ctx.chat.id, message.media_id, {
            caption: userInfo,
            reply_markup: inlineKeyboard
          });
        } else if (mediaType === 'voice') {
          await ctx.api.sendVoice(ctx.chat.id, message.media_id, {
            caption: userInfo,
            reply_markup: inlineKeyboard
          });
        } else if (mediaType === 'video_note') {
          await ctx.api.sendVideoNote(ctx.chat.id, message.media_id, {
            caption: userInfo,
            reply_markup: inlineKeyboard
          });
        }
      }
    }
  }
});

bot.hears('–°–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –æ—Ç–≤–µ—Ç–∞', async (ctx) => {
  if (!isAdmin(ctx.from.id, process.env.ADMIN_ID)) return;

  const messages = await getMessages(db, 0);  // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –æ—Ç–≤–µ—Ç–∞

  if (messages.length === 0) {
    await ctx.reply('–°–æ–æ–±—â–µ–Ω–∏–π –±–µ–∑ –æ—Ç–≤–µ—Ç–∞ –Ω–µ—Ç.');
  } else {
    for (const message of messages) {
      const inlineKeyboard = new InlineKeyboard().text('–û—Ç–≤–µ—Ç–∏—Ç—å', `reply-${message.id}`);
      const userInfo = `–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${message.userId}`;

      if (message.message) {
        await ctx.reply(`${userInfo}: ${message.message}`, { reply_markup: inlineKeyboard });
      } else {
        const mediaType = message.media_type;
        if (mediaType === 'photo') {
          await ctx.api.sendPhoto(ctx.chat.id, message.media_id, {
            caption: userInfo,
            reply_markup: inlineKeyboard
          });
        } else if (mediaType === 'video') {
          await ctx.api.sendVideo(ctx.chat.id, message.media_id, {
            caption: userInfo,
            reply_markup: inlineKeyboard
          });
        } else if (mediaType === 'document') {
          await ctx.api.sendDocument(ctx.chat.id, message.media_id, {
            caption: userInfo,
            reply_markup: inlineKeyboard
          });
        } else if (mediaType === 'audio') {
          await ctx.api.sendAudio(ctx.chat.id, message.media_id, {
            caption: userInfo,
            reply_markup: inlineKeyboard
          });
        } else if (mediaType === 'voice') {
          await ctx.api.sendVoice(ctx.chat.id, message.media_id, {
            caption: userInfo,
            reply_markup: inlineKeyboard
          });
        } else if (mediaType === 'video_note') {
          await ctx.api.sendVideoNote(ctx.chat.id, message.media_id, {
            caption: userInfo,
            reply_markup: inlineKeyboard
          });
        }
      }
    }
  }
});

bot.on('message', async (ctx) => {
  const authorId = process.env.ADMIN_ID;
  const fromId = ctx.from.id.toString();

  console.log(`unreadMessagesCount: ${unreadMessagesCount}`);
  console.log(`fromId: ${fromId}, authorId: ${authorId}`);

  if (fromId === authorId && ctx.session.replyToUser) {
    const targetMessageId = ctx.session.replyToMessageId;

    await db.run(`UPDATE messages SET replied = 1 WHERE id = ?`, [targetMessageId]);
    await ctx.api.sendMessage(ctx.session.replyToUser, '–ù–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∞ –∫–∞–Ω–∞–ª–∞.');

    if (ctx.message.text) {
      await ctx.api.sendMessage(ctx.session.replyToUser, ctx.message.text);
    } else if (ctx.message.voice) {
      await ctx.api.sendVoice(ctx.session.replyToUser, ctx.message.voice.file_id);
    } else if (ctx.message.video) {
      await ctx.api.sendVideo(ctx.session.replyToUser, ctx.message.video.file_id);
    } else if (ctx.message.photo) {
      const photo = ctx.message.photo.pop();
      await ctx.api.sendPhoto(ctx.session.replyToUser, photo.file_id);
    } else if (ctx.message.audio) {
      await ctx.api.sendAudio(ctx.session.replyToUser, ctx.message.audio.file_id);
    } else if (ctx.message.document) {
      await ctx.api.sendDocument(ctx.session.replyToUser, ctx.message.document.file_id);
    } else if (ctx.message.video_note) {
      await ctx.api.sendVideoNote(ctx.session.replyToUser, ctx.message.video_note.file_id);
    }

    await ctx.reply('–û—Ç–≤–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω.');
    ctx.session.replyToUser = undefined;
    ctx.session.replyToMessageId = undefined;

    if (unreadMessagesCount > 0) {
      unreadMessagesCount--;
    }
    return;
  }

  if (suggestionClicked[fromId]) {
    console.log('User sent a suggestion.');
    let mediaType = '';
    let mediaId = '';

    if (ctx.message.text) {
      await db.run(`INSERT INTO messages (userId, message, first_name, username) VALUES (?, ?, ?, ?)`, 
                   [ctx.from.id, ctx.message.text, ctx.from.first_name, ctx.from.username]);
    } else {
      if (ctx.message.photo) {
        const photo = ctx.message.photo.pop();
        mediaType = 'photo';
        mediaId = photo.file_id;
      } else if (ctx.message.video) {
        mediaType = 'video';
        mediaId = ctx.message.video.file_id;
      } else if (ctx.message.document) {
        mediaType = 'document';
        mediaId = ctx.message.document.file_id;
      } else if (ctx.message.audio) {
        mediaType = 'audio';
        mediaId = ctx.message.audio.file_id;
      } else if (ctx.message.voice) {
        mediaType = 'voice';
        mediaId = ctx.message.voice.file_id;
      } else if (ctx.message.video_note) {
        mediaType = 'video_note';
        mediaId = ctx.message.video_note.file_id;
      }

      await db.run(`INSERT INTO messages (userId, media_type, media_id, first_name, username) VALUES (?, ?, ?, ?, ?)`,
                   [ctx.from.id, mediaType, mediaId, ctx.from.first_name, ctx.from.username]);
    }

    await ctx.reply('–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–≤—Ç–æ—Ä—É –±–æ—Ç–∞');
    suggestionClicked[fromId] = false;

    unreadMessagesCount++;
    console.log(`Admin notified, new unreadMessagesCount: ${unreadMessagesCount}`);
    await ctx.api.sendMessage(authorId, `–í–∞–º –ø—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ù–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: ${unreadMessagesCount}`);
  } else {
    if (fromId !== authorId) {
      console.log('User is not admin and did not click suggestion.');
      await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–µ–¥–ª–æ–∂–∫–∞" –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–≤—Ç–æ—Ä—É –∫–∞–Ω–∞–ª–∞!');
    } else {
      console.log('Admin received a new message.');
      unreadMessagesCount++;
      console.log(`Admin notified, new unreadMessagesCount: ${unreadMessagesCount}`);
      await ctx.api.sendMessage(authorId, `–í–∞–º –ø—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ù–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: ${unreadMessagesCount}`);
    }
  }
});

bot.callbackQuery(/^reply-(\d+)$/, async (ctx) => {
  const targetMessageId = ctx.match[1];
  const targetMessage = await db.get('SELECT userId FROM messages WHERE id = ?', [targetMessageId]);

  if (targetMessage) {
    ctx.session.replyToUser = targetMessage.userId;
    ctx.session.replyToMessageId = targetMessageId;  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
    await ctx.answerCallbackQuery('–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–º, –∞—É–¥–∏–æ, –≤–∏–¥–µ–æ –∏–ª–∏ —Ñ–æ—Ç–æ.');
  } else {
    await ctx.answerCallbackQuery('–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.', { show_alert: true });
  }
});

bot.catch((err) => {
  const ctx = err.ctx;
  logger.error(`Error while handling update ${ctx.update.update_id}:`, err);
});

bot.start();